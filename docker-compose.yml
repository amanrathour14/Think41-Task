services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: ecommerce_chatbot_mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: aman2021
      MYSQL_DATABASE: ecommerce_chatbot
      MYSQL_USER: chatbot_user
      MYSQL_PASSWORD: chatbot_pass
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./backend/setup_mysql.sql:/docker-entrypoint-initdb.d/setup_mysql.sql
    networks:
      - chatbot_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ecommerce_chatbot_backend
    restart: unless-stopped
    environment:
      - DATABASE_URL=mysql+pymysql://root:aman2021@mysql:3306/ecommerce_chatbot
      - GROQ_API_KEY=${GROQ_API_KEY}
      - DEBUG=False
      - LOG_LEVEL=INFO
      - ALLOWED_ORIGINS=http://localhost:3000,http://localhost:80,http://frontend:80
    ports:
      - "8000:8000"
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - chatbot_network
    volumes:
      - ./backend:/app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: ecommerce_chatbot_frontend
    restart: unless-stopped
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - chatbot_network
    environment:
      - REACT_APP_API_URL=http://localhost:8000
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Optional: Redis for caching (future enhancement)
  # redis:
  #   image: redis:7-alpine
  #   container_name: ecommerce_chatbot_redis
  #   restart: unless-stopped
  #   ports:
  #     - "6379:6379"
  #   networks:
  #     - chatbot_network
  #   volumes:
  #     - redis_data:/data

networks:
  chatbot_network:
    driver: bridge

volumes:
  mysql_data:
    driver: local
  # redis_data:
  #   driver: local 